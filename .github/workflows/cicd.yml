name: Deploy Static Site

on:
  push:
    paths:
      - '**.html'
      - 'css/**'
      - 'js/**'
      - 'images/**'
      - 'fonts/**'
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  deploy-static:
    environment: workflow_secrets
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ secrets.MY_AWS_REGION }}

    - name: Setup Terraform (for outputs only)
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false

    - name: Terraform Init (Backend Only)
      run: terraform -chdir=terraform init -backend-config="bucket=${{ secrets.TF_STATE_BUCKET_ID }}" -backend-config="key=terraform/terraform.tfstate" -backend-config="region=${{ secrets.MY_AWS_REGION }}" -backend-config="encrypt=true" -backend-config="use_lockfile=true"

    - name: Fetch Terraform Outputs
      id: outputs
      run: |
        terraform -chdir=terraform output -json > outputs.json
        echo "API_URL=$(jq -r '.["api_url"].value' outputs.json)" >> $GITHUB_OUTPUT
        echo "USER_POOL_ID=$(jq -r '.["user-pool-id"].value' outputs.json)" >> $GITHUB_OUTPUT
        echo "USER_POOL_CLIENT_ID=$(jq -r '.["user-pool-client-id"].value' outputs.json)" >> $GITHUB_OUTPUT
        echo "CLOUDFRONT_ID=$(jq -r '.["cloudfront-distribution-id"].value' outputs.json)" >> $GITHUB_OUTPUT
        echo "CLOUDFRONT_DOMAIN=$(jq -r '.["cloudfront-distribution-domain"].value' outputs.json)" >> $GITHUB_OUTPUT
        echo "STATIC_BUCKET_ID=$(jq -r '.["static-bucket-id"].value' outputs.json)" >> $GITHUB_OUTPUT
        echo "::add-mask::$(jq -r '.["api_url"].value' outputs.json)"
        echo "::add-mask::$(jq -r '.["user-pool-id"].value' outputs.json)"
        echo "::add-mask::$(jq -r '.["user-pool-client-id"].value' outputs.json)"
        echo "::add-mask::$(jq -r '.["cloudfront-distribution-id"].value' outputs.json)"
        echo "::add-mask::$(jq -r '.["static-bucket-id"].value' outputs.json)" 
        rm outputs.json    
    - name: Generate config.js
      run: |
        cat > js/config.js <<EOF
        window._config = {
            cognito: {
                userPoolId: '${{ steps.outputs.outputs.USER_POOL_ID }}', // e.g. us-east-2_uXboG5pAb
                userPoolClientId: '${{ steps.outputs.outputs.USER_POOL_CLIENT_ID }}', // e.g. 25ddkmj4v6hfsfvruhpfi7n4hv
                region: '${{ secrets.MY_AWS_REGION }}' // e.g. us-east-2
            },
            api: {
                invokeUrl: '${{ steps.outputs.outputs.API_URL }}' // e.g. https://rc7nyt4tql.execute-api.us-west-2.amazonaws.com/prod',
            }
        };
        EOF

    - name: Sync Static Files to S3
      run: |
        aws s3 sync . s3://${{ steps.outputs.outputs.STATIC_BUCKET_ID }} --exclude ".git/*" --exclude ".github/*" --exclude "terraform/*" --exclude "*.DS_Store" --cache-control "max-age=300,public" --delete

    - name: Invalidate CloudFront Cache
      run: |
        aws cloudfront create-invalidation --distribution-id ${{ steps.outputs.outputs.CLOUDFRONT_ID }} --paths "/*"

    - name: Output CloudFront Domain
      id: output-domain
      run: |
        echo "CloudFront Domain: ${{ steps.outputs.outputs.CLOUDFRONT_DOMAIN }}"
        echo "cloudfront-domain=${{ steps.outputs.outputs.CLOUDFRONT_DOMAIN }}" >> $GITHUB_OUTPUT
